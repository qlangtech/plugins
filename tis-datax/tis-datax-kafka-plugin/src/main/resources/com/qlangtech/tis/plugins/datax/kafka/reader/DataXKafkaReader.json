{
  "retryBackoffMs": {
    "help": "The amount of time to wait before attempting to retry a failed request to a given topic partition. This avoids repeatedly sending requests in a tight loop under some failure scenarios.",
    "dftVal": 100,
    "label": "Retry Backoff, ms"
  },
  "clientId": {
    "help": "An ID string to pass to the server when making requests. The purpose of this is to be able to track the source of requests beyond just ip/port by allowing a logical application name to be included in server-side request logging.",
    "label": "Client ID",
    "placeholder": "consumerId"
  },
  "MessageFormat": {
    "help": "The serialization used based on this ",
    "label": "MessageFormat"
  },
  "groupId": {
    "help": "The Group ID is how you distinguish different consumer groups.",
    "label": "Group ID",
    "placeholder": "group.id"
  },
  "pollingTime": {
    "help": "Amount of time Kafka connector should try to poll for messages.",
    "dftVal": 100,
    "label": "Polling Time"
  },
  "subscription": {
    "help": "You can choose to manually assign a list of partitions, or subscribe to all topics matching specified pattern to get dynamically assigned partitions.",
    "label": "Subscription Method"
  },
  "receiveBufferBytes": {
    "help": "The size of the TCP receive buffer (SO_RCVBUF) to use when reading data. If the value is -1, the OS default will be used.",
    "dftVal": 32768,
    "label": "Receive Buffer, bytes"
  },
  "autoOffsetReset": {
    "help": "What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server - earliest: automatically reset the offset to the earliest offset, latest: automatically reset the offset to the latest offset, none: throw exception to the consumer if no previous offset is found for the consumer's group, anything else: throw exception to the consumer.",
    "dftVal": "latest",
    "label": "Auto Offset Reset",
    "enum": [
      {
        "val": "latest",
        "label": "latest"
      },
      {
        "val": "earliest",
        "label": "earliest"
      },
      {
        "val": "none",
        "label": "none"
      }
    ]
  },
  "protocol": {
    "help": "The Protocol used to communicate with brokers.",
    "label": "Protocol"
  },
  "requestTimeoutMs": {
    "help": "The configuration controls the maximum amount of time the client will wait for the response of a request. If the response is not received before the timeout elapses the client will resend the request if necessary or fail the request if retries are exhausted.",
    "dftVal": 30000,
    "label": "Request Timeout, ms"
  },
  "autoCommitIntervalMs": {
    "help": "The frequency in milliseconds that the consumer offsets are auto-committed to Kafka if enable.auto.commit is set to true.",
    "dftVal": 5000,
    "label": "Auto Commit Interval, ms"
  },
  "maxRecordsProcess": {
    "help": "The Maximum to be processed per execution",
    "dftVal": 100000,
    "label": "Maximum Records"
  },
  "bootstrapServers": {
    "help": "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster. The client will make use of all servers irrespective of which servers are specified here for bootstrapping&mdash;this list only impacts the initial hosts used to discover the full set of servers. This list should be in the form <code>host1:port1,host2:port2,...</code>. Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers (you may want more than one, though, in case a server is down).",
    "label": "Bootstrap Servers",
    "placeholder": "kafka-broker1:9092,kafka-broker2:9092"
  },
  "testTopic": {
    "help": "The Topic to test in case the can consume messages.",
    "label": "Test Topic",
    "placeholder": "test.topic"
  },
  "enableAutoCommit": {
    "help": "If true, the consumer's offset will be periodically committed in the background.",
    "dftVal": true,
    "label": "Enable Auto Commit",
    "enum": [
      {
        "val": true,
        "label": "是"
      },
      {
        "val": false,
        "label": "否"
      }
    ]
  },
  "maxPollRecords": {
    "help": "The maximum number of records returned in a single call to poll(). Note, that max_poll_records does not impact the underlying fetching behavior. The consumer will cache the records from each fetch request and returns them incrementally from each poll.",
    "dftVal": 500,
    "label": "Max Poll Records"
  },
  "repeatedCalls": {
    "help": "The number of repeated calls to poll() if no messages were received.",
    "dftVal": 3,
    "label": "Repeated Calls"
  },
  "clientDnsLookup": {
    "help": "Controls how the client uses DNS lookups. If set to use_all_dns_ips, connect to each returned IP address in sequence until a successful connection is established. After a disconnection, the next IP is used. Once all IPs have been used once, the client resolves the IP(s) from the hostname again. If set to resolve_canonical_bootstrap_servers_only, resolve each bootstrap address into a list of canonical names. After the bootstrap phase, this behaves the same as use_all_dns_ips. If set to default (deprecated), attempt to connect to the first IP address returned by the lookup, even if the lookup returns multiple IP addresses.",
    "dftVal": "use_all_dns_ips",
    "label": "Client DNS Lookup",
    "enum": [
      {
        "val": "default",
        "label": "default"
      },
      {
        "val": "use_all_dns_ips",
        "label": "use_all_dns_ips"
      },
      {
        "val": "resolve_canonical_bootstrap_servers_only",
        "label": "resolve_canonical_bootstrap_servers_only"
      }
    ]
  }
}
